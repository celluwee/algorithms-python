#https://www.youtube.com/watch?v=rEPggzaPoUw&t=1928s
#расстояние левинштейна (двумерный массив,если совпадают переносим по диагонали, если нет то минимальный из трех соседей+1)
Fij={F(i-1)(j-1), если Ai=Bj; 1+min(F(i-1)j,Fi(j-1),F(i-1)(j-1))}
F0j=j, Fi0=i, F00=0
def levenstein(A, B):
    F = [[(i + j) if i*j == 0 else 0 for j in range(len(B) + 1)] for i in range(len(A)+1)]
    for i in range(1, len(A)+1):
        for j in range(1, len(B)+1):
            if A[i-1] == B[j-1]:
                F[i][j] = F[i-1][j-1]
            else:
                F[i][j] = min(F[i-1][j], F[i][j-1], F[i-1][j-1]) + 1
    return F[len(A)][len(B)]
#найти подстроку в строке
def find(sub, s):
    for i in range(len(s) - len(sub)):
        for j in range(len(sub)):
            if sub[i+j] != sub[j]:     #ищем первое вхождение
                break
        return i
#префикс-функция pref(s) = pi, s[0:pi] == s[-pi:]    (близка к О(n))
def pref(s:str): #-> list[int]:
    N = len(s)
    res = [0] * N
    for i in range(1, N):
        p = res[i-1]
        while p > 0 and s[i] != s[p]:
            p = res[p-1]
        res[i] = p + 1 if s[i] == s[p] else 0
    return res

#поиск всех вхождений КМП O(n)
#1) g = sub + '#' + s
#2) pi = pref(g)
#3) ans = sum(pref(g)[i] == len(sub))
def KMP(sub, s):     #->номер символа совпадения
    res = []
    n = len(sub)
    g = sub + '\0' + s    #символ которого точно нет
    r = pref(g)
    for j in range(2*n, len(g)):
        if r[j] == n:
            res.append(j - 2*n)
    return res
    

#z-function
#z_1=k <=> s[:k] == s[i:i+k]
def z(s):
    res = [0] * len(s)
    for i in range(1, len(s)):
        k = 0
        while i+k < len(s) and s[k] == s[i+k]:
            k += 1
        res[i] = k
    return res
#ускорение   l, r левая, правая границы
def z(s):
    res = [0] * len(s)
    l, r = 0, 0
    for i in range(1, len(s)):
        res[i] = max(0, min(res[i - l], r - i))
        while i + res[i] < len(s) and s[res[i]] == s[i + res[i]]:
            res[i] += 1
        if i + res[i] > r:
            l, r = i, i + res[i]
    return res
        